[mcu]
canbus_uuid: 3415581797c1

[mcu sb2209]
canbus_uuid: 8d3b2670e5f1

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 5500
max_z_velocity: 15
max_z_accel: 350
square_corner_velocity: 5.0

[input_shaper]
shaper_freq_x: 75.4
shaper_type_x: mzv
shaper_freq_y: 43.2
shaper_type_y: mzv

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR_6
[stepper_x]
step_pin: PG15
dir_pin: PB3
enable_pin: !PD5
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: sb2209:PB6
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 100
homing_positive_dir: true
homing_retract_dist: 5

[tmc5160 stepper_x]
cs_pin: PG9
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

##  A Stepper - Right
##  Connected to MOTOR_5
[stepper_y]
step_pin: PB5
dir_pin: !PB4
enable_pin: !PB6
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: PF0
position_min: 0
position_endstop: 300
position_max: 300
homing_speed: 100
homing_positive_dir: true
homing_retract_dist: 5

[tmc5160 stepper_y]
cs_pin: PG10
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_3
[stepper_z]
step_pin: PE1
dir_pin: !PE0
enable_pin: !PE2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_min: -10
position_max: 260
homing_speed: 20
second_homing_speed: 3
homing_retract_dist: 3

[tmc5160 stepper_z]
cs_pin: PG12
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_1
[stepper_z1]
step_pin: PC13
dir_pin: PC14
enable_pin: !PE6
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z1]
cs_pin: PG14
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_2
[stepper_z2]
step_pin: PE4
dir_pin: !PE5
enable_pin: !PE3
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z2]
cs_pin: PG13
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

##  Z3 Stepper - Front Right
##  Connected to MOTOR_4
[stepper_z3]
step_pin: PB8
dir_pin: PB9
enable_pin: !PB7
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc5160 stepper_z3]
cs_pin: PG11
spi_bus: spi4
interpolate: false
run_current: 1.0
sense_resistor: 0.075
stealthchop_threshold: 0

#####################################################################
#   Extruder
#####################################################################
[extruder]
step_pin: sb2209:PD0
dir_pin: sb2209:PD1
enable_pin: !sb2209:PD2
rotation_distance: 23.5362310388
gear_ratio: 50:10               #BMG Gear Ratio
microsteps: 32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.400
filament_diameter: 1.75
instantaneous_corner_velocity: 1.5
max_extrude_cross_section: 0.8

heater_pin: sb2209:PB13 # Heat0
pwm_cycle_time: 0.02
smooth_time: 0.5
max_power: 0.8

sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: sb2209:PA3
control: pid
pid_kp=23.253
pid_ki=2.627
pid_kd=51.451
min_extrude_temp: 170
min_temp: 0
max_temp: 300

[tmc2209 extruder]
uart_pin: sb2209:PA15
interpolate: false
run_current: 0.650
stealthchop_threshold: 0

[adxl345]
cs_pin: sb2209:PB12
spi_software_sclk_pin: sb2209:PB10
spi_software_mosi_pin: sb2209:PB11
spi_software_miso_pin: sb2209:PB2
axes_map: z,-y,x

[resonance_tester]
probe_points: 150, 150, 20
accel_chip: adxl345

[temperature_sensor sb2209]
sensor_type: Generic 3950
sensor_pin: sb2209:PA2

#####################################################################
#   Stealthburner LEDs
#####################################################################
[neopixel sb_leds]
pin: sb2209:PD3
chain_count: 10
color_order: GRB,GRB,GRB,GRB,GRB,GRB,GRB,GRB,RGBW,RGBW
initial_RED: 1.0
initial_GREEN: 1.0
initial_BLUE: 1.0
initial_WHITE: 1.0

#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
heater_pin: PF6
sensor_type: Generic 3950
sensor_pin: PB1
max_power: 1.0
min_temp: 0
max_temp: 135
control: pid
pid_kp = 68.629
pid_ki = 2.629
pid_kd = 447.807

#####################################################################
#   Fan Control
#####################################################################

##  Print Cooling Fan - FAN0
[fan]
pin: sb2209:PA1
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

##  Hotend Fan - FAN1
[heater_fan hotend_fan]
pin: sb2209:PA0
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
#fan_speed: 1.0

##  Controller fan - FAN2
# [controller_fan controller_fan]
# pin: PD12
# kick_start_time: 0.5
# heater: heater_bed

##  Exhaust fan - FAN3
#[heater_fan exhaust_fan]
#pin: PD13
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: heater_bed
#heater_temp: 60
#fan_speed: 1.0

#####################################################################
#   Probe
#####################################################################
[probe]
pin: sb2209:PB5
x_offset: 0
y_offset: 0
z_offset: -0.325
speed: 10.0
lift_speed: 50.0
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 3
activate_gcode:
    {% set PROBE_TEMP = 150 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 7200

[safe_z_home]
home_xy_position: 150,150
speed: 300
z_hop: 10
z_hop_speed: 50

##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]
gantry_corners:
   -60,-10
   360,370
points:
   50,25
   50,225
   250,225
   250,25
speed: 300
horizontal_move_z: 5
retries: 5
retry_tolerance: 0.0075
max_adjust: 15

#####################################################################
#   Bed Mesh
#####################################################################

[bed_mesh]
speed: 300
horizontal_move_z: 5
mesh_min: 30, 30
mesh_max: 270,270
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5 # Values should be odd, so one point is directly at bed center
algorithm: bicubic
zero_reference_position: 150, 150

#####################################################################
#   Displays
#####################################################################
[display]
lcd_type: uc1701
cs_pin: PD14
a0_pin: PD13
rst_pin: PD12
encoder_pins: ^PG4, ^PG5
click_pin: ^!PD15
contrast: 63
spi_bus: spi4

[neopixel btt_mini12864]
pin: PD11
chain_count: 3
initial_RED: 1.0
initial_GREEN: 0.0
initial_BLUE: 0.0
color_order: RGB

#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G90
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    G28
    PARK
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    G32                            ; home all axes
    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament

    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
#   Mainsail
#####################################################################
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 0.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 0.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
gcode:

[virtual_sdcard]
path: /var/lib/moonraker/gcodes
on_error_gcode: CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set allow_park = False if not macro_found
                 else False if client.park_at_cancel is not defined
                 else True  if client.park_at_cancel|lower == 'true'
                 else False %}
  {% set retract = 5.0  if not macro_found else client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = ""                                    if not macro_found
             else ""                                    if client.park_at_cancel_x is not defined
             else "X=" + client.park_at_cancel_x|string if client.park_at_cancel_x is not none %}
  {% set park_y = ""                                    if not macro_found
             else ""                                    if client.park_at_cancel_y is not defined
             else "Y=" + client.park_at_cancel_y|string if client.park_at_cancel_y is not none %}
  {% set custom_park = True if (park_x|length > 0 or park_y|length > 0) else False %}
  ##### end of definitions #####
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{printer[printer.toolhead.extruder].target}"

  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: 0
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move        = velocity if not macro_found else client.speed_move|default(velocity) %}
  ##### end of definitions #####
  M109 S{last_extruder_temp}

  _CLIENT_EXTRUDE
  RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}

# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE | default(1) | int != 0 %}
  {% set MACRO = params.MACRO | default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE | int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER | default(pause_at_layer.layer) | int %}
  {% set MACRO = params.MACRO | default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    {action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    {action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}

##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = False if not macro_found
                     else False if client.use_custom_pos is not defined
                     else True  if client.use_custom_pos|lower == 'true'
                     else False %}
  {% set custom_park_x  = 0.0 if not macro_found else client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = 0.0 if not macro_found else client.custom_park_y|default(0.0) %}
  {% set park_dz        = 2.0 if not macro_found else client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = 900  if not macro_found else client.speed_hop|default(15) * 60 %}
  {% set sp_move        = velocity * 60 if not macro_found else client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set use_fw_retract = False if not macro_found
                     else False if client.use_fw_retract is not defined
                     else True  if client.use_fw_retract|lower == 'true' and printer.firmware_retraction is defined
                     else False %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.unretract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_unretract|default(35) %}

  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}

  {% if printer.extruder.can_extrude %}
    {% if use_fw_retract %}
      {% if length < 0 %}
        G10
      {% else %}
        G11
      {% endif %}
    {% else %}
      M83
      G1 E{length} F{(speed|float|abs) * 60}
      {% if absolute_extrude %}
        M82
      {% endif %}
    {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set macro_found = True if printer['gcode_macro _CLIENT_VARIABLE'] is defined else False %}
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}

  {% set length = (params.LENGTH|float) if params.LENGTH is defined
             else 1.0 if not macro_found
             else client.retract|default(1.0) %}

  {% set speed = params.SPEED if params.SPEED is defined
            else 35 if not macro_found
            else client.speed_retract|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.132500, -0.068750, -0.061250, -0.053750, -0.065000
#*# 	  -0.140000, -0.077500, -0.067500, -0.057500, -0.065000
#*# 	  -0.093750, -0.063750, 0.000000, -0.056250, -0.072500
#*# 	  -0.081250, -0.061250, -0.052500, -0.046250, -0.052500
#*# 	  -0.077500, -0.063750, -0.056250, -0.055000, -0.056250
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 270.0
#*# min_y = 30.0
#*# max_y = 270.0
