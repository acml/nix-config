name: ci
on:
  push:
    branches:
      - master
      - try
  pull_request:
jobs:
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: parse
        run: nix-instantiate --json --parse ./**/*.nix
      - name: lints
        run: |
          nix build -L --keep-going \
            .\#checks.x86_64-linux.pre-commit-check

  get-hosts:
    runs-on: ubuntu-latest
    outputs:
      hosts: ${{ steps.get-hosts.outputs.hosts }}
      systems: ${{ steps.get-hosts.outputs.systems }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
      - id: get-hosts
        run: |
          nix eval --json -f ./nix/hosts.nix all | jq -c '
            to_entries
            | map({name: .key} + .value)
            | map_values(
                if .hostPlatform  == "x86_64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "aarch64-linux" then . + {ghSystem: "ubuntu-latest"}
                elif .hostPlatform == "x86_64-darwin" then . + {ghSystem: "macos-latest"}
                else . + {ghSystem: null} end)
            | map_values(select(.ghSystem != null))
          ' > hosts.json

          jq -c 'map(.ghSystem) | unique | sort' hosts.json > systems.json

          echo "hosts=$(cat hosts.json)" >> "$GITHUB_OUTPUT"
          echo "systems=$(cat systems.json)" >> "$GITHUB_OUTPUT"

  build-shell:
    runs-on: ${{ matrix.system }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        system: ${{ fromJson(needs.get-hosts.outputs.systems) }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            experimental-features = nix-command flakes recursive-nix
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: build-shell
        run: |
          SYSTEM="$(nix eval --impure --expr 'builtins.currentSystem')"
          nix run nixpkgs\#nix-build-uncached -- \
            --keep-going \
            -A "devShells.$SYSTEM.default.inputDerivation"

  build-host:
    name: build-${{ matrix.host.name }}
    runs-on: ${{ matrix.host.ghSystem }}
    needs: get-hosts
    strategy:
      fail-fast: false
      matrix:
        host: ${{ fromJson(needs.get-hosts.outputs.hosts) }}
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v20
        with:
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            builders-use-substitutes = true
            experimental-features = nix-command flakes recursive-nix
      - name: setup-aarch64-builder
        if: matrix.host.hostPlatform == 'aarch64-linux'
        env:
          AARCH64_BOX_KEY: ${{ secrets.AARCH64_BOX_KEY }}
        run: |
          sudo mkdir -p /root/.ssh
          echo "$AARCH64_BOX_KEY" | sudo tee /root/.ssh/aarch64.community.nixos > /dev/null
          sudo chmod 0644 /root/.ssh/aarch64.community.nixos
          builder_cfg=(
            ssh-ng://lovesegfault@aarch64.nixos.community
            aarch64-linux
            /root/.ssh/aarch64.community.nixos
            64
            1
            big-parallel
            -
            c3NoLWVkMjU1MTkgQUFBQUMzTnphQzFsWkRJMU5URTVBQUFBSU1VVHo1aTl1NUgyRkhOQW1aSnlvSmZJR3lVbS9IZkdoZnduYzE0MkwzZHMgcm9vdEBuaXhvcwo=
          )
          echo "${builder_cfg[*]}" | sudo tee /etc/nix/machines > /dev/null
      - uses: cachix/cachix-action@v12
        with:
          name: nix-config
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - name: build-host
        run: |
          nix run nixpkgs#nix-build-uncached -- \
            --keep-going \
            -A packages.${{ matrix.host.hostPlatform }}.${{ matrix.host.name }}

  check:
    runs-on: ubuntu-latest
    needs: [ build-host, build-shell ]
    if: always()
    steps:
      - uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
